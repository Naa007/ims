package com.stepup.ims.service;

import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.properties.UnitValue;
import com.stepup.ims.model.Inspection;
import com.stepup.ims.model.Inspector;
import com.stepup.ims.model.ProposedCVs;
import com.stepup.ims.modelmapper.InspectionModelMapper;
import com.stepup.ims.repository.InspectionRepository;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFColor;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Comparator;
import java.util.List;

@Service
public class ReportsService {

    @Autowired
    private InspectionService inspectionService;

    @Autowired
    private EmployeeService employeeService;

    @Autowired
    private InspectorService inspectorService;

    @Autowired
    private InspectionRepository inspectionRepository;

    @Autowired
    private InspectionModelMapper inspectionModelMapper;

    public byte[] generateReport(String client, String period, String from, String to, String format) throws IllegalAccessException {

        List<Inspection> inspections;
        String reportName;

        if (client == null || client.isEmpty() || client.equalsIgnoreCase("All")) {
            inspections = inspectionService.getInspectionsBetweenDates(from, to);
            reportName = "Inspections_" + period + "_" + from.split("T")[0] + "_" + to.split("T")[0] + "." + format.toLowerCase();
        } else {
            inspections = inspectionService.getInspectionsByClientAndBetweenDates(client, from, to);
            reportName = client.toUpperCase() + "Inspections_" + period + "_" + from.split("T")[0] + "_" + to.split("T")[0] + "." + format.toLowerCase();
        }
        return switch (format.toLowerCase()) {
            case "pdf" -> generatePdfReport(reportName, inspections);
            case "excel" -> generateExcelReport(reportName, inspections);
            default -> throw new IllegalArgumentException("Unsupported format: " + format);
        };
    }

    private byte[] generatePdfReport(String reportName, List<Inspection> inspections) throws IllegalAccessException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        PdfWriter writer = new PdfWriter(out);
        PdfDocument pdf = new PdfDocument(writer);
        Document document = new Document(pdf);


        document.add(new Paragraph("Inspections Report: " + reportName));
        document.add(new Paragraph("Generated by: " + employeeService.getEmployeeNameByEmail(SecurityContextHolder.getContext().getAuthentication().getName())));
        document.add(new Paragraph("Generated on: " + LocalDateTime.now()));
        document.add(new Paragraph("\n"));

        // Create a table with dynamic column count based on the number of Inspection fields
        if (!inspections.isEmpty()) {
            Inspection sampleInspection = inspections.get(0);
            var fields = sampleInspection.getClass().getDeclaredFields();

            Table table = new Table(UnitValue.createPercentArray(fields.length));
            table.setWidth(UnitValue.createPercentValue(100));

            // Add headers (field names) to the table
            for (var field : fields) {
                field.setAccessible(true);
                table.addHeaderCell(new Cell().add(new Paragraph(field.getName())));
            }

            // Add inspection data rows
            for (Inspection inspection : inspections) {
                for (var field : fields) {
                    field.setAccessible(true);
                    Object value = field.get(inspection);
                    table.addCell(new Cell().add(new Paragraph(value != null ? value.toString() : "")));
                }
            }

            document.add(table);
        }
        document.close();
        return out.toByteArray();
    }

    private byte[] generateExcelReport(String sheetName, List<Inspection> inspections) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        if (inspections.isEmpty()) {
            return new byte[0];
        }
        try (Workbook workbook = new XSSFWorkbook()) {
            Sheet sheet = workbook.createSheet(sheetName);

            // Create styles
            var headerCellStyle = workbook.createCellStyle();
            var font = workbook.createFont();
            font.setBold(true);
            headerCellStyle.setFont(font);
            headerCellStyle.setWrapText(true);
            var lightGrey = new XSSFColor(new java.awt.Color(211, 211, 211), null);
            ((XSSFCellStyle) headerCellStyle).setFillForegroundColor(lightGrey);
            headerCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);

            var evenRowCellStyle = workbook.createCellStyle();
            ((XSSFCellStyle) evenRowCellStyle).setFillForegroundColor(new XSSFColor(new java.awt.Color(245, 245, 245), null));
            evenRowCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            evenRowCellStyle.setWrapText(true);

            var oddRowCellStyle = workbook.createCellStyle();
            oddRowCellStyle.setWrapText(true);

            // Setting up header row
            Row headerRow = sheet.createRow(0);
            if (!inspections.isEmpty()) {
                String[] headers = {
                        "Job Alloted No (IISPL No)", "Notification received Date & Time", "Client Name",
                        "Inspection Country", "Notification No", "Inspection Date as per Notification",
                        "Inspection Item", "Inspection Activity with Stages", "Mechanical / Electrical",
                        "Vendor/Sub Vendor Name", "CV's proposed to client (Inspector Name)", "CV & Certificates",
                        "CV's Reviewed Technical Coordinator Name", "PQR", "CV submitted to client Date/time",
                        "CV Status", "Approved inspector name", "Date of order confirmation",
                        "Scope Sector/Applicable only for selected Job", "End Client Name", "Project Name",
                        "Status of Reference Documents for Inspection", "Documents Reviewed by Technical Coordinator with Name",
                        "Contract Review Prepared", "Inspection Advise Note",
                        "Documents and Instructions Sent Inspector on",
                        "Any issues before Inspection or after Inspection", "FR sent to Client on",
                        "Receipt of Inspection Reports from Inspector on", "Inspection Reports Reviewed Person Name",
                        "IR and Supporting Documents Sent to Client on", "Inspection Report Number",
                        "NCR Raised", "IRN Sent to Client on", "Impartiality & Confidentiality",
                        "Job Folder Link"
                };

                for (int i = 0; i < headers.length; i++) {
                    var cell = headerRow.createCell(i);
                    cell.setCellValue(headers[i]);
                    cell.setCellStyle(headerCellStyle);
                }

                // Adding data rows with alternating background colors and wrapping text
                for (int rowIndex = 0; rowIndex < inspections.size(); rowIndex++) {
                    Row dataRow = sheet.createRow(rowIndex + 1);
                    Inspection inspection = inspections.get(rowIndex);
                    var style = (rowIndex % 2 == 0) ? evenRowCellStyle : oddRowCellStyle;

                    dataRow.createCell(0).setCellValue(inspection.getInspectionNo());
                    dataRow.getCell(0).setCellStyle(style);

                    dataRow.createCell(1).setCellValue(inspection.getNotificationReceivedDateTime() != null ? inspection.getNotificationReceivedDateTime().toString() : "");
                    dataRow.getCell(1).setCellStyle(style);

                    dataRow.createCell(2).setCellValue(inspection.getClient().getClientName() + " - " + inspection.getClient().getCountry());
                    dataRow.getCell(2).setCellStyle(style);

                    dataRow.createCell(3).setCellValue(inspection.getInspectionCountry());
                    dataRow.getCell(3).setCellStyle(style);

                    dataRow.createCell(4).setCellValue(inspection.getNotificationNo());
                    dataRow.getCell(4).setCellStyle(style);

                    dataRow.createCell(5).setCellValue(inspection.getInspectionDateAsPerNotification() != null ? inspection.getInspectionDateAsPerNotification().toString() : "");
                    dataRow.getCell(5).setCellStyle(style);

                    dataRow.createCell(6).setCellValue(inspection.getInspectionItem());
                    dataRow.getCell(6).setCellStyle(style);

                    dataRow.createCell(7).setCellValue(inspection.getInspectionActivityWithStages());
                    dataRow.getCell(7).setCellStyle(style);

                    dataRow.createCell(8).setCellValue(inspection.getInspectionType().toString().toLowerCase());
                    dataRow.getCell(8).setCellStyle(style);

                    dataRow.createCell(9).setCellValue(inspection.getInspectionLocationDetails());
                    dataRow.getCell(9).setCellStyle(style);

                    if (inspection.getProposedCVs() != null && !inspection.getProposedCVs().isEmpty()) {
                        ProposedCVs latestCV = inspection.getProposedCVs().stream()
                                .max(Comparator.comparing(ProposedCVs::getId))
                                .orElse(null);
                        dataRow.createCell(10).setCellValue(
                                latestCV.getInspector() != null && latestCV.getInspector().getInspectorName() != null ? latestCV.getInspector().getInspectorName() : "");
                        dataRow.getCell(10).setCellStyle(style);

                        dataRow.createCell(11).setCellValue(latestCV.isCvCertificatesAvailable() ? "Yes" : "No");
                        dataRow.getCell(11).setCellStyle(style);

                        dataRow.createCell(12).setCellValue(
                                latestCV.getCvReviewByTechnicalCoordinator() != null && latestCV.getCvReviewByTechnicalCoordinator().getEmpName() != null ? latestCV.getCvReviewByTechnicalCoordinator().getEmpName() : "");
                        dataRow.getCell(12).setCellStyle(style);

                        dataRow.createCell(13).setCellValue(latestCV.isPqrAvailable() ? "Yes" : "No");
                        dataRow.getCell(13).setCellStyle(style);

                        dataRow.createCell(14).setCellValue(latestCV.getCvSubmittedToClientDate() != null ? latestCV.getCvSubmittedToClientDate().toString() : "");
                        dataRow.getCell(14).setCellStyle(style);

                        dataRow.createCell(15).setCellValue(latestCV.isCvStatus() ? "Approved" : "Not Approved");
                        dataRow.getCell(15).setCellStyle(style);
                    }

                    dataRow.createCell(16).setCellValue(inspection.getApprovedInspectorName());
                    dataRow.getCell(16).setCellStyle(style);

                    dataRow.createCell(17).setCellValue(inspection.getOrderConfirmationDate() != null ? inspection.getOrderConfirmationDate().toString() : "");
                    dataRow.getCell(17).setCellStyle(style);

                    dataRow.createCell(18).setCellValue(inspection.getSectorScope());
                    dataRow.getCell(18).setCellStyle(style);

                    dataRow.createCell(19).setCellValue(inspection.getEndClientName());
                    dataRow.getCell(19).setCellStyle(style);

                    dataRow.createCell(20).setCellValue(inspection.getProjectName());
                    dataRow.getCell(20).setCellStyle(style);

                    dataRow.createCell(21).setCellValue(inspection.isReferenceDocumentsForInspectionStatus() ? "Available" : "Not Available");
                    dataRow.getCell(21).setCellStyle(style);

                    dataRow.createCell(22).setCellValue(inspection.getDocumentsReviewedByTechnicalCoordinator());
                    dataRow.getCell(22).setCellStyle(style);

                    dataRow.createCell(23).setCellValue(inspection.isContractReviewPrepared() ? "Yes" : "No");
                    dataRow.getCell(23).setCellStyle(style);

                    dataRow.createCell(24).setCellValue(inspection.isInspectionAdviseNote() ? "Yes" : "No");
                    dataRow.getCell(24).setCellStyle(style);

                    dataRow.createCell(25).setCellValue(inspection.getInstructionsToInspectorDate() != null ? inspection.getInstructionsToInspectorDate().toString() : "");
                    dataRow.getCell(25).setCellStyle(style);

                    dataRow.createCell(26).setCellValue(inspection.isAnyInspectionIssues() ? "Yes" : "No");
                    dataRow.getCell(26).setCellStyle(style);

                    dataRow.createCell(27).setCellValue(inspection.getFrSentToClientDate() != null ? inspection.getFrSentToClientDate().toString() : "");
                    dataRow.getCell(27).setCellStyle(style);

                    dataRow.createCell(28).setCellValue(inspection.getInspectionReportsReceivedDate() != null ? inspection.getInspectionReportsReceivedDate().toString() : "");
                    dataRow.getCell(28).setCellStyle(style);

                    dataRow.createCell(29).setCellValue(inspection.getInspectionReviewedBy());
                    dataRow.getCell(29).setCellStyle(style);

                    dataRow.createCell(30).setCellValue(inspection.getInspectionSupportDocumentsSentDate() != null ? inspection.getInspectionSupportDocumentsSentDate().toString() : "");
                    dataRow.getCell(30).setCellStyle(style);

                    dataRow.createCell(31).setCellValue(inspection.getInspectionReportNumber());
                    dataRow.getCell(31).setCellStyle(style);

                    dataRow.createCell(32).setCellValue(inspection.isNcrRaised() ? "Yes" : "No");
                    dataRow.getCell(32).setCellStyle(style);

                    dataRow.createCell(33).setCellValue(inspection.getIrnSentDate() != null ? inspection.getIrnSentDate().toString() : "");
                    dataRow.getCell(33).setCellStyle(style);

                    dataRow.createCell(34).setCellValue(inspection.isImpartialityAndConfidentiality() ? "Yes" : "No");
                    dataRow.getCell(34).setCellStyle(style);

                    dataRow.createCell(35).setCellValue(inspection.getJobFolderLink());
                    dataRow.getCell(35).setCellStyle(style);
                }
            }

            for (int i = 0; i < 36; i++) {
                sheet.autoSizeColumn(i);
            }

            workbook.write(out);
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException("Error creating Excel report", e);
        }
        return out.toByteArray();
    }

    public byte[] generateInspectorsReport() {
        List<Inspector> inspectors = inspectorService.getAllInspectors();

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        try (Workbook workbook = new XSSFWorkbook()) {

            Sheet sheet = workbook.createSheet("Inspectors List");

            // Create styles
            var headerCellStyle = workbook.createCellStyle();
            var font = workbook.createFont();
            font.setBold(true);
            headerCellStyle.setFont(font);
            headerCellStyle.setWrapText(true);

            var lightGrey = new XSSFColor(new java.awt.Color(211, 211, 211), null);
            ((XSSFCellStyle) headerCellStyle).setFillForegroundColor(lightGrey);
            headerCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);

            var evenRowCellStyle = workbook.createCellStyle();
            ((XSSFCellStyle) evenRowCellStyle).setFillForegroundColor(new XSSFColor(new java.awt.Color(245, 245, 245), null));
            evenRowCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            evenRowCellStyle.setWrapText(true);

            var oddRowCellStyle = workbook.createCellStyle();
            oddRowCellStyle.setWrapText(true);

            // Define headers
            String[] headers = {
                    "Inspector Id", "Inspector Name", "Inspector Type", "Phone", "Email", "Country", "Address",
                    "DOB", "Education Details", "Disciplines", "Certificates", "Special Qualification",
                    "Main Qualification", "Inspector Status", "Remarks"
            };

            // Header row
            Row headerRow = sheet.createRow(0);
            for (int i = 0; i < headers.length; i++) {
                var cell = headerRow.createCell(i);
                cell.setCellValue(headers[i]);
                cell.setCellStyle(headerCellStyle);
            }

            // Data rows
            for (int rowIndex = 0; rowIndex < inspectors.size(); rowIndex++) {
                Row dataRow = sheet.createRow(rowIndex + 1);
                Inspector inspector = inspectors.get(rowIndex);

                var style = (rowIndex % 2 == 0) ? evenRowCellStyle : oddRowCellStyle;

                dataRow.createCell(0).setCellValue(inspector.getInspectorId());
                dataRow.getCell(0).setCellStyle(style);

                dataRow.createCell(1).setCellValue(inspector.getInspectorName());
                dataRow.getCell(1).setCellStyle(style);

                dataRow.createCell(2).setCellValue(inspector.getInspectorType() != null ? inspector.getInspectorType().toString().toLowerCase() : "");
                dataRow.getCell(2).setCellStyle(style);

                dataRow.createCell(3).setCellValue(inspector.getPhone());
                dataRow.getCell(3).setCellStyle(style);

                dataRow.createCell(4).setCellValue(inspector.getEmail());
                dataRow.getCell(4).setCellStyle(style);

                dataRow.createCell(5).setCellValue(inspector.getCountry());
                dataRow.getCell(5).setCellStyle(style);

                dataRow.createCell(6).setCellValue(inspector.getAddress());
                dataRow.getCell(6).setCellStyle(style);

                dataRow.createCell(7).setCellValue(inspector.getDob() != null ? inspector.getDob().toString() : "");
                dataRow.getCell(7).setCellStyle(style);

                dataRow.createCell(8).setCellValue(inspector.getEducationDetails());
                dataRow.getCell(8).setCellStyle(style);

                dataRow.createCell(9).setCellValue(inspector.getDisciplines());
                dataRow.getCell(9).setCellStyle(style);

                dataRow.createCell(10).setCellValue(inspector.getCertificates().toString().replace("[", "").replace("]", ""));
                dataRow.getCell(10).setCellStyle(style);

                dataRow.createCell(11).setCellValue(inspector.getSpecialQualification().toString().replace("[", "").replace("]", ""));
                dataRow.getCell(11).setCellStyle(style);

                dataRow.createCell(12).setCellValue(inspector.getMainQualificationCategory().toString().replace("[", "").replace("]", ""));
                dataRow.getCell(12).setCellStyle(style);

                dataRow.createCell(13).setCellValue(inspector.getInspectorStatus() != null ? inspector.getInspectorStatus().toString().toLowerCase() : "");
                dataRow.getCell(13).setCellStyle(style);

                dataRow.createCell(14).setCellValue(inspector.getRemarks());
                dataRow.getCell(14).setCellStyle(style);
            }

            for (int i = 0; i < 15; i++) {
                sheet.autoSizeColumn(i);
            }

            workbook.write(out);
        } catch (IOException e) {
            e.printStackTrace();
            throw new RuntimeException("Error creating Inspectors Excel report", e);
        }

        return out.toByteArray();
    }
}
